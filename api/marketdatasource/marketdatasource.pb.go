// Code generated by protoc-gen-go. DO NOT EDIT.
// source: marketdatasource.proto

package marketdatasource

import (
	context "context"
	fmt "fmt"
	"github.com/ettec/open-trading-platform/go/model"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeRequest struct {
	ListingId            int32    `protobuf:"varint,1,opt,name=listingId,proto3" json:"listingId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0d1a67e6fa25534, []int{0}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetListingId() int32 {
	if m != nil {
		return m.ListingId
	}
	return 0
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "marketdatasource.SubscribeRequest")
}

func init() { proto.RegisterFile("marketdatasource.proto", fileDescriptor_c0d1a67e6fa25534) }

var fileDescriptor_c0d1a67e6fa25534 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0x4d, 0x2c, 0xca,
	0x4e, 0x2d, 0x49, 0x49, 0x2c, 0x49, 0x2c, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x12, 0x40, 0x17, 0x97, 0xe2, 0x4f, 0xce, 0xc9, 0x4f, 0x2a, 0x2c, 0xcd, 0x2f,
	0x81, 0x2a, 0x91, 0x12, 0xcc, 0xcd, 0x4f, 0x49, 0xcd, 0x49, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x83,
	0x08, 0x29, 0x19, 0x70, 0x09, 0x04, 0x97, 0x26, 0x15, 0x27, 0x17, 0x65, 0x26, 0xa5, 0x06, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xc9, 0x70, 0x71, 0xe6, 0x64, 0x16, 0x97, 0x64, 0xe6, 0xa5,
	0x7b, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x21, 0x04, 0x8c, 0x22, 0xb9, 0x04, 0x7c,
	0xc1, 0x36, 0xb9, 0x24, 0x96, 0x24, 0x06, 0x83, 0x6d, 0x12, 0x72, 0xe5, 0x62, 0x77, 0xce, 0xcf,
	0xcb, 0x4b, 0x4d, 0x2e, 0x11, 0x52, 0xd2, 0xc3, 0x70, 0x1f, 0xba, 0x05, 0x52, 0x02, 0x7a, 0x60,
	0x87, 0xe8, 0x39, 0xe7, 0xe4, 0x27, 0x05, 0x82, 0xdc, 0xa7, 0xc4, 0xa0, 0xc1, 0x68, 0xc0, 0x98,
	0xc4, 0x06, 0x76, 0x93, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x04, 0xd3, 0x13, 0x83, 0xe3, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MarketDataSourceClient is the client API for MarketDataSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MarketDataSourceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (MarketDataSource_ConnectClient, error)
}

type marketDataSourceClient struct {
	cc *grpc.ClientConn
}

func NewMarketDataSourceClient(cc *grpc.ClientConn) MarketDataSourceClient {
	return &marketDataSourceClient{cc}
}

func (c *marketDataSourceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (MarketDataSource_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MarketDataSource_serviceDesc.Streams[0], "/marketdatasource.MarketDataSource/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataSourceConnectClient{stream}
	return x, nil
}

type MarketDataSource_ConnectClient interface {
	Send(*SubscribeRequest) error
	Recv() (*model.ClobQuote, error)
	grpc.ClientStream
}

type marketDataSourceConnectClient struct {
	grpc.ClientStream
}

func (x *marketDataSourceConnectClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *marketDataSourceConnectClient) Recv() (*model.ClobQuote, error) {
	m := new(model.ClobQuote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MarketDataSourceServer is the server API for MarketDataSource service.
type MarketDataSourceServer interface {
	Connect(MarketDataSource_ConnectServer) error
}

// UnimplementedMarketDataSourceServer can be embedded to have forward compatible implementations.
type UnimplementedMarketDataSourceServer struct {
}

func (*UnimplementedMarketDataSourceServer) Connect(srv MarketDataSource_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

func RegisterMarketDataSourceServer(s *grpc.Server, srv MarketDataSourceServer) {
	s.RegisterService(&_MarketDataSource_serviceDesc, srv)
}

func _MarketDataSource_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarketDataSourceServer).Connect(&marketDataSourceConnectServer{stream})
}

type MarketDataSource_ConnectServer interface {
	Send(*model.ClobQuote) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type marketDataSourceConnectServer struct {
	grpc.ServerStream
}

func (x *marketDataSourceConnectServer) Send(m *model.ClobQuote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *marketDataSourceConnectServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MarketDataSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "marketdatasource.MarketDataSource",
	HandlerType: (*MarketDataSourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _MarketDataSource_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "marketdatasource.proto",
}
